package version5;
/*
 * 本个版本依旧采用面向过程的编程思想
 * 目的是尝试给软件做一个简单的交互界面
 * 增加输入操作————将程序中一些变量做到可人工输入
 */
import java.util.Random;
import java.util.Scanner;

public class V05 {
	public static int max_Value = 100;    //定义操作数的范围   此处表示100以内的算式
	public static int equ_Num = 50;     //定义生成算式的数量
	public static int line_Num = 5;    // 定义每行输出几个算式
	public static double proportion = 0.5;   //定义习题中加法比例
	
	public static void main(String[] args) {
		printHeader();    //输出题目提示信息
		defineOptions();    //询问是否自定义选项
		int[][] exercises = new int [equ_Num][3];    //定义用来存放算式的数组   采用二维数组来实现
		exercises = generateExerciseOfAdditionEquations(equ_Num, max_Value,proportion);  //产生习题
		printExercises(exercises,line_Num);  //打印习题
		printAnswersOrNot(exercises); //询问是否选择打印答案
	}
	//询问是否自定义选项
	public static void defineOptions() {
		System.out.println("采用默认选项请按1。（默认选项：操作数范围：100以内，生成算式数量：50，"
				+ "每行输出5个算式，加法算式比例：50%）\n自定义选项请按2。");
		Scanner scanner = new Scanner(System .in);
		int option = scanner.nextInt();
		if(option == 1) return ;
		if(option == 2) {
			max_Value = setMaxValue();
			equ_Num = setEquNum();
			line_Num = setLineNum();
			proportion = setProportion();
		}
	}
	//自定义操作数范围
	public static int setMaxValue() {
		Scanner scanner = new Scanner(System.in);
		System.out.print("请输入你想定义的操作数的范围：");
		int value = scanner.nextInt();
		return value;
	}
	//自定义生成算式数量
	public static int setEquNum() {
		Scanner scanner = new Scanner(System.in);
		System.out.print("请输入你想生成算式的数量：");
		int value = scanner.nextInt();
		return value;
	}
	//自定义每行显示几个算式
	public static int setLineNum() {
		Scanner scanner = new Scanner(System.in);
		System.out.print("请输入你想让每行显示几个算式：");
		int value = scanner.nextInt();
		return value;
	}
	//自定义每行显示几个算式
		public static double setProportion() {
			Scanner scanner = new Scanner(System.in);
			System.out.print("请输入你想设置的加法比例：");
			double value = scanner.nextDouble();
			return value;
		}
	//打印提示信息
	public static void printHeader() {
		System.out.println("----------------------------------------------");
		System.out.println("--程序输出50道100以内的加减法算式习题---");
		System.out.println("--每次运行可得到一套习题和答案---");
		System.out.println("----------------------------------------------");
	}
	//获得操作数 0-max 
	public static int generateAnOperand(int max) {
		Random random = new Random();
		return random.nextInt(max + 1);
	}
	//获得操作数  返回 0 或 1
	public static int generateAnOperater(double proportion) {
		Random random = new Random();
		//通过更改参数控制加法算式与减法算式的生成比例   
		int operater = 0;
		double flag = random.nextDouble();
		if(flag <= proportion) {
			operater = 0;
		}else {
			operater = 1;
		}
		return operater;
	}
	//产生一个加法算式   返回一个一维数组 e[] 
	public static int[] generateAnAddEquation(int max_Value) {
		int e[] = new int[] { 0 , 0 , 0 };  // e[0] 左操作数  e[1] 右操作数 e[2] 操作符
		int left_Operand = 0;
		int right_Operand = 0;
		int ov = 0;   //操作数   0表示加法   1表示减法
		 //加入习题集前首先判断算式合法性
		do {
			left_Operand = generateAnOperand(max_Value + 1);
			right_Operand = generateAnOperand(max_Value + 1);
			e[0] = left_Operand;
			e[1] = right_Operand;
			e[2] = ov;
		}while(!validityOfFormula(e));
		return e;
	}
	//产生一个减法算式   返回一个一维数组 e[] 
	public static int[] generateAnSubEquation(int max_Value) {
		int e[] = new int[] { 0 , 0 , 0 };  // e[0] 左操作数  e[1] 右操作数 e[2] 操作符
		int left_Operand = 0;
		int right_Operand = 0;
		int ov = 1;   //操作数   0表示加法   1表示减法
		 //加入习题集前首先判断算式合法性
		do {
			left_Operand = generateAnOperand(max_Value + 1);
			right_Operand = generateAnOperand(max_Value + 1);
			e[0] = left_Operand;
			e[1] = right_Operand;
			e[2] = ov;
		}while(!validityOfFormula(e));
		return e;
	}
	//判断当前算式是否已经存在在习题集当中了
	public static boolean isExist(int[] e,int[][] exercises,int n) {
		boolean flag = false;
		for(int i = 0; i < n; i++) {
			if(e[0] == exercises[i][0] && e[1] == exercises[i][1] && e[2] == exercises[i][2]
					|| (e[0] == exercises[i][1] && e[1] == exercises[i][0] && e[2] == exercises[i][2])) {
				flag = true;
				return flag;
			}
		}
		return flag;
	}
	//判断算式合法性————是否可以加入到习题集当中
	public static boolean validityOfFormula(int[] e) {
		boolean flag = false;
		if(e[2] == 0) {
			if((e[0] + e[1]) <= 100) {
				flag = true;
				return flag;
			}
		}
		if(e[2] == 1) {
			if((e[0] - e[1]) >= 0) {
				flag = true;
				return flag;
			}
		}
		return flag;
	}
	//产生习题集  传入参数有：  生成题目数量num  操作数的范围max_value
	public static int[][] generateExerciseOfAdditionEquations(int num,int max_Value,double proportion){
		int[] e = new int[3];  //存放一个算式
		int ov = 0;  //定义一个操作符
		int[][] exercises = new int[num][];
		//循环产生数目为num的加减法算式 
		for(int i = 0 ; i < num ; i++) {
			ov = generateAnOperater(proportion);
			if(ov == 0) {
				e = generateAnAddEquation(max_Value);
			}else {
				e = generateAnSubEquation(max_Value);
			}
			if(!isExist(e,exercises,i)) {
				exercises[i] = e;
			}
		}
		return exercises;
	}
	//打印习题
	public static void printExercises(int[][] exercises,int line_Num) {
		for(int i = 0; i < exercises.length; i++) {
			if(exercises[i][2] == 0) {
			 	System.out.print((i+1) + "：" + exercises[i][0] + " + " + exercises[i][1] + "= \t");
			}else {
			 	System.out.print((i+1) + "：" + exercises[i][0] + " - " + exercises[i][1] + "= \t");
			}
			if((i+1) % line_Num == 0) {
				System.out.println();
			}
		}
	}
	//询问选择是否需要显示答案
	public static void printAnswersOrNot(int exercises[][]) {
		System.out.println("如果要显示答案请按1。");
		Scanner scanner = new Scanner(System.in);
		int flag = scanner.nextInt();
		if(flag == 1) {
			printAnswersOfExercises(exercises);
		}
	}
	//打印习题答案
	public static void printAnswersOfExercises(int[][] exercises) {
		System.out.println("--------习题答案如下----------------");
		for(int i = 0; i < exercises.length; i++) {
			if(exercises[i][2] == 0) {
			 	System.out.println("第" + (i+1) + "题答案：" + (exercises[i][0] +  exercises[i][1]));
			}else {
			 	System.out.println("第" + (i+1) + "题答案：" + (exercises[i][0] - exercises[i][1]));
			}
		}
	}
}
